** Swagger **
Swagger is the world’s largest framework of API developer tools for the OpenAPI Specification(OAS), enabling development across the entire API lifecycle, from design and documentation, to test and deployment.

1) Getting Dependencies

<!-- swagger dependencies -->
	<dependency>
		<groupId>io.springfox</groupId>
		<artifactId>springfox-swagger2</artifactId>
		<version>2.7.0</version>
	</dependency>
	<dependency>
		<groupId>io.springfox</groupId>
		<artifactId>springfox-swagger-ui</artifactId>
		<version>2.7.0</version>
     </dependency>

2) Configration Class for swagger

@EnableSwagger2
@PropertySource("classpath:swagger.properties")
@ComponentScan(basePackageClasses = RestaurantController.class)
@Configuration
public class SwaggerConfiguration {
	
	public static final String SWAGGER_API_VERSION = "1.0";
	public static final String LICENSE = "license";
	public static final String title = "Resturant REST API";
	public static final String description = "Restful API for Resturant";
      private ApiInfo apiInfo() {

		return new ApiInfoBuilder()
                                       .title(title)
                                       .description(description)
                                      .license(LICENSE)
                                       .version(SWAGGER_API_VERSION)
			                     .build();
	}

	@Bean
	public Docket resturantApi() {
		return new Docket(DocumentationType.SWAGGER_2)
                        .apiInfo(apiInfo())
                        .pathMapping("/")
                        .select()
				.paths(PathSelectors.regex("/api/vi.*"))
                        .build();
	}
}

3) Make a swagger.properties file in resource to configure the properties of swagger

Changes can be made in controller,service or domain using swagger annotation 

@RequestMapping("api/vi")
@RestController
@Api(value = "ResturantControllerApi", produces = MediaType.APPLICATION_JSON_VALUE)
public class RestaurantController {

	RestaurantService resturantService;

	public RestaurantController(RestaurantService resturantService) {
		
		this.resturantService = resturantService;

	}
	
	@GetMapping("/resturant/{id}")
	@ApiOperation("get the resturant with specific id")
	@ApiResponses(value = { @ApiResponse(code = 200, message = "ok", response      = Restaurant.class) })
	public ResponseEntity<Restaurant> findResturantById(Restaurant resturant, @PathVariable("id") String id) {
		
	resturant.setId(Integer.parseInt(id));
		
	Restaurant resturant1 = resturantService.findResturantUsingId(resturant);
		
	return new ResponseEntity<Restaurant>(resturant1, HttpStatus.OK);
		
	}

}


